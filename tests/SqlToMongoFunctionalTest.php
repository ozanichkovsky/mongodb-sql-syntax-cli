<?php

namespace MongoSql\Tests;

use MongoDB\Client;
use MongoSql\Service\MongoRunnerService;
use MongoSql\Service\SqlToMongoService;

class SqlToMongoFunctionalTest extends Base
{

    const TEST_COLLECTION = 'test';

    /**
     * @var Client
     */
    private $mongoClient;

    /**
     * @var SqlToMongoService
     */
    private $sqlToMongoService;

    /**
     * @var MongoRunnerService
     */
    private $mongoRunnerService;

    private $dbName;

    const DATA = [
        [
            'name' => 'Test',
            'dob' =>
                [
                    'day' => 1,
                    'month' => 8,
                    'year' => 1984
                ]
        ],
        [
            'name' => 'Name',
            'dob' =>
                [
                    'day' => 8,
                    'month' => 8,
                    'year' => 1990
                ]
        ]
    ];

    protected function setUp()
    {
        $app = $this->createApplication();

        $this->mongoClient = new Client($app['mongodb.server']);
        $this->dbName = $app['mongodb.name.test'];

        $this->sqlToMongoService = $app['sqlToMongoService'];
        $this->mongoRunnerService = new MongoRunnerService($this->mongoClient, $this->dbName);

        $this->clearCollection();
        $this->fillCollection(self::DATA);
    }

    /**
     * @dataProvider dataProvider
     */
    public function testExecutingSqlOnMongo($query, $expected)
    {
        $mongoQuery = $this->sqlToMongoService->parse($query);
        $resultIterator = $this->mongoRunnerService->execute($mongoQuery);
        $result = [];
        foreach ($resultIterator as $object) {
            //convert BSONDocument to array
            $item = json_decode(json_encode($object), true);
            // Removed '_id' as it is autogenerated by MongoDB
            unset($item['_id']);
            $result[] = $item;
        }

        $this->assertEquals($expected, $result);
    }

    public function dataProvider()
    {
        yield 'Select all' =>
        [
            'SELECT * FROM test',
            self::DATA
        ];

        // Test projection

        yield 'Use projection' =>
        [
            'SELECT name, dob.year FROM test',
            [
                [
                    'name' => 'Test',
                    'dob' =>
                        [
                            'year' => 1984
                        ]
                ],
                [
                    'name' => 'Name',
                    'dob' =>
                        [
                            'year' => 1990
                        ]
                ]
            ]
        ];

        // Test WHERE simple comparison

        yield 'WHERE simple comparison' =>
        [
            'SELECT name FROM test WHERE dob.year = 1984',
            [
                [
                    'name' => 'Test'
                ]
            ]
        ];

        yield 'logical AND' =>
        [
            'SELECT name FROM test WHERE dob.year = 1984 AND dob.month >= 1',
            [
                [
                    'name' => 'Test'
                ]
            ]
        ];

        yield 'logical OR' =>
        [
            'SELECT * FROM test WHERE dob.year = 1984 OR dob.year = 1990',
            self::DATA
        ];

        yield 'logical XOR' =>
        [
            'SELECT name FROM test WHERE dob.year = 1984 XOR dob.month = 8',
            [
                [
                    'name' => 'Name'
                ]
            ]
        ];

        yield 'complex WHERE' =>
        [
            'SELECT * FROM test WHERE (dob.year = 1984 OR dob.year = 1990) AND dob.month = 8',
            self::DATA
        ];

        yield 'ORDER BY' =>
        [
            'SELECT name FROM test ORDER BY dob.year DESC, name',
            [
                [
                    'name' => 'Name'
                ],
                [
                    'name' => 'Test'
                ]
            ]
        ];

        yield 'LIMIT' =>
        [
            'SELECT name FROM test LIMIT 1',
            [
                [
                    'name' => 'Test'
                ]
            ]
        ];

        yield 'SKIP' =>
        [
            'SELECT name FROM test LIMIT 1 SKIP 1',
            [
                [
                    'name' => 'Name'
                ]
            ]
        ];
    }

    protected function tearDown()
    {
        $this->clearCollection();
    }


    private function fillCollection($items)
    {
        $this->mongoClient->{$this->dbName}->{self::TEST_COLLECTION}->insertMany($items);
    }

    private function clearCollection()
    {
        $this->mongoClient->{$this->dbName}->{self::TEST_COLLECTION}->deleteMany([]);
    }
}